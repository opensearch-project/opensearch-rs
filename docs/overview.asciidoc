[[overview]]
== Overview

This is the official Rust client for {es}. Full documentation is hosted on 
https://docs.rs/elasticsearch[docs.rs] -- this page provides _only_ an overview.

Further resources:

* https://github.com/opensearch-project/opensearch-rs[Source code]
* https://opensearch.org/docs/latest[API documentation]


[discrete]
=== {es} Version Compatibility

|===
| Rust client | OpenSearch
| 1.x         | 1.x
|===

A major version of the client is compatible with the same major version of {es}.
Since {es} is developed following https://semver.org/[Semantic Versioning] 
principles, any minor/patch version of the client can be used against any 
minor/patch version of {es} **within the same major version lineage**. For 
example,

- A `1.5.0` client can be used against `1.0.0` OpenSearch
- A `1.5.0` client can be used against `1.6.0` OpenSearch

In the former case, a 1.5.0 client may contain additional API functions that are
not available in 1.0.0 {os}. In this case, these APIs cannot be used, but for
any APIs available in {os}, the respective API functions on the client will be
compatible.

In the latter case, a 1.5.0 client won't contain API functions for APIs that are
introduced in {os} 1.6.0+, but for all other APIs available in {os}, the
respective API functions on the client will be compatible.

**No compatibility assurances are given between different major versions of the 
client and {os}.** Major differences likely exist between major versions of
{os}, particularly around request and response object formats, but also around
API urls and behaviour.


[discrete]
=== Create a client

To create a client to make API calls to OpenSearch running on `\http://localhost:9200`

[source,rust]
----
let client = OpenSearch::default();
----

Alternatively, you can create a client to make API calls against OpenSearch running on a
specific `url::Url`

[source,rust]
----
let transport = Transport::single_node("https://example.com")?;
let client = OpenSearch::new(transport);
----

If you're running against an OpenSearch deployment in https://www.elastic.co/cloud/[Elastic Cloud],
a client can be created using a https://www.elastic.co/guide/en/cloud/current/ec-cloud-id.html[Cloud ID]
and credentials retrieved from the Cloud web console

[source,rust]
----
let cloud_id = "<cloud id from cloud web console>";
let credentials = Credentials::Basic("<username>".into(), "<password>".into());
let transport = Transport::cloud(cloud_id, credentials)?;
let client = OpenSearch::new(transport);
----


[discrete]
=== Making API calls

The following makes an API call to `tweets/_search` with the json body
`{"query":{"match":{"message":"OpenSearch"}}}`

[source,rust]
----
let response = client
    .search(SearchParts::Index(&["tweets"]))
    .from(0)
    .size(10)
    .body(json!({
        "query": {
            "match": {
                "message": "OpenSearch rust"
            }
        }
    }))
    .send()
    .await?;

let response_body = response.json::<Value>().await?;
let took = response_body["took"].as_i64().unwrap();
for hit in response_body["hits"]["hits"].as_array().unwrap() {
    // print the source document
    println!("{:?}", hit["_source"]);
}
----